#!/bin/sh

# chkconfig: 2345 30 70
# description: starts MYRI driver for Myrinet card

### BEGIN INIT INFO
# Provides:          mx
# Required-Start:    $network $syslog $remote_fs
# Required-Stop:     $network $syslog $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Description:       Starts the MYRI driver
### END INIT INFO

# add/modify/uncomment MYRI_MODULES_PARAMS lines to change defaults
#MYRI_MODULE_PARAMS=" myri_max_endpoints=64 $MYRI_MODULE_PARAMS"
#MYRI_MODULE_PARAMS=" myri_mx_max_nodes=64 $MYRI_MODULE_PARAMS"

#Note this is replaced by make install, not configure!
if test -z "$MYRI_MODULE_DIR"; then
    MYRI_MODULE_DIR=/opt/snf/sbin
fi
export MYRI_MODULE_DIR
export MYRI_DRIVER=myri_snf
PATH=/usr/bin:/bin:/usr/sbin:/sbin

set -e

if test ! -d ${MYRI_MODULE_DIR}; then
    echo "Something bad happened with the install script"
    echo "MYRI_DIR isn't pointing to a valid directory"
    exit 1
fi

if test "$MYRI_DRIVER" = myri_mx; then
    export mx_start_mapper="${MYRI_MODULE_DIR}/mx_start_mapper"
    export mx_stop_mapper="${MYRI_MODULE_DIR}/mx_stop_mapper"
else
    export mx_start_mapper=/bin/true
    export mx_stop_mapper=/bin/true
fi

# Stop the Ethernet-over-Myrinet device(s)
stop_myri_ether() {
    ifaces=$(ifconfig -s | tail -n +2 | awk '{ print $1 }')
    for i in ${ifaces}; do
      if test -r  /sys/class/net/${i}/device/driver/module/drivers/*myri_snf*; then
	/sbin/ifconfig ${i} down >/dev/null 2>&1
      fi
    done
}

# Remove the myri modules if loaded
unload_myri() {
    stop_myri_ether
    $mx_stop_mapper
    if test -f /etc/modprobe.conf; then
	cat /etc/modprobe.conf |
	sed -ne 's,^[ \t]*alias[ \t]\+\([A-Za-z0-9]\+\)[ \t]\+\([A-Za-z0-9]\+\),\1 \2,p' |
	while read line; do
	    set -- $line
	    # make sure its aliased to a myri driver that's not ours
	    echo $2 | grep '^myri[_1]' | grep -v "$MYRI_DRIVER" > /dev/null 2>& 1 || continue
	    # Make sure its an ethernet device
	    grep "$1:" /proc/net/dev >/dev/null 2>&1 || continue
	    echo ""
	    echo "WARNING: /etc/modeprobe.conf may contain aliases that conflict with $MYRI_DRIVER"
	    echo ""
	    break
	done
    fi
    awk '/^(myri|mx)/ { print $1 }' /proc/modules | grep -v "mxm_wmi" |
    while read module; do
	echo "Removing $module"
	/sbin/rmmod $module
    done
}

# Remove the GM module if loaded
unload_other() {
    if grep gm /proc/modules > /dev/null; then
	if test -x /etc/init.d/gm; then
	    echo "Unloading gm driver"
	    /etc/init.d/gm stop
	elif grep -q "^220 gm" /proc/devices ; then
	    echo "Unloading gm driver"
	    pkill gm_mapper && sleep 1
	    /sbin/rmmod gm
        fi
    fi
    if grep -q myri10ge /proc/modules ; then
	/sbin/rmmod myri10ge
    fi
    if test -d /sys/bus/pci/drivers/myri10ge &&
       ls /sys/bus/pci/drivers/myri10ge/ | fgrep -q 00.0 ; then
      (cd /sys/bus/pci/drivers/myri10ge &&
       for dev in *:00.0 ; do echo -n $dev > unbind;done )
    fi
}

# Load the myri modules
load_myri() {
    if grep "swiotlb=[^ ]*force" /proc/cmdline ; then
      echo "ERROR: ${MYRI_DRIVER} is incompatible with software iotlb (swiotlb=force found in /proc/cmdline)" >&2
      exit 1
    fi
    echo "Loading ${MYRI_DRIVER}"
    if test "$MYRI_DRIVER" = myri_mx; then
      params=" myri_mx_mapper_path=$mx_start_mapper "
    fi
    params="$params $MYRI_MODULE_PARAMS $*"

    case `uname -r` in 
     2.6.*)
	# the kernel zlib is only used on 2.6 (>= 2.6.10)
	if /sbin/modinfo ${MYRI_MODULE_DIR}/${MYRI_DRIVER}.ko | grep ^depends: | grep zlib_inflate > /dev/null 2>&1 ; then
          modprobe zlib_inflate
	fi
	# LRO is used on >= 2.6.24
	if /sbin/modinfo ${MYRI_MODULE_DIR}/${MYRI_DRIVER}.ko | grep ^depends: | grep inet_lro > /dev/null 2>&1 ; then 
	  modprobe inet_lro
	fi
	/sbin/insmod ${MYRI_MODULE_DIR}/${MYRI_DRIVER}.ko $params
        ;;
     3.*)
	# the kernel zlib is only used on 2.6 (>= 2.6.10)
	if /sbin/modinfo ${MYRI_MODULE_DIR}/${MYRI_DRIVER}.ko | grep ^depends: | grep zlib_inflate > /dev/null 2>&1 ; then
          modprobe zlib_inflate
	fi
	# LRO is used on >= 2.6.24
	if /sbin/modinfo ${MYRI_MODULE_DIR}/${MYRI_DRIVER}.ko | grep ^depends: | grep inet_lro > /dev/null 2>&1 ; then 
	  modprobe inet_lro
	fi
	/sbin/insmod ${MYRI_MODULE_DIR}/${MYRI_DRIVER}.ko $params
        ;;
     *)
       echo "ERROR: Don't know about kernel version `uname -r`" >&2
       exit 1
      ;;
    esac
    sleep 1
    echo "Creating myri devices"
    $MYRI_MODULE_DIR/myri_create_devs
    $mx_start_mapper
    return 0

}

cmd="$1"

shift

case "$cmd" in
    start|"")
        if ! echo "$MYRI_MODULE_PARAMS $*" | grep -q "myri_bus|myri_mac" ; then
	  unload_other
        fi
	if test ${MYRI_DRIVER} = myri_mx; then
          if $MYRI_MODULE_DIR/../bin/mx_endpoint_info 2> /dev/null | grep raw > /dev/null ; then
	    :
	  else
	   unload_myri
	  fi
	else
	   unload_myri
	fi
	load_myri "$@"
	;;
    stop)
	unload_myri
	;;
    start-mapper)
	$mx_start_mapper
	;;
    stop-mapper)
	$mx_stop_mapper
	;;
    status)
	if grep ${MYRI_DRIVER} /proc/modules > /dev/null; then
	    echo "${MYRI_DRIVER} driver is loaded"
	else
	    echo "${MYRI_DRIVER} driver is not loaded"
	fi
	;;
    restart)
        if ! echo "$MYRI_MODULE_PARAMS $*" | grep -q "myri_bus|myri_mac" ; then
	  unload_other
        fi
	unload_myri
	load_myri "$@"
	;;
    *)
	if test "${MYRI_DRIVER}" = myri_mx; then
	  echo $"Usage: $0 {start|stop|start-mapper|stop-mapper|status|restart}"
	else
	  echo $"Usage: $0 {start|stop|status|restart}"
	fi
        exit 1
esac

exit 0
