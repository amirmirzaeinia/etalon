--- linux-3.16.3-clean/kernel/time.c	2014-09-17 11:22:16.000000000 -0600
+++ ./linux-3.16.3-vtmininet/kernel/time.c	2017-08-29 10:02:36.884974380 -0600
@@ -37,7 +37,8 @@
 #include <linux/fs.h>
 #include <linux/math64.h>
 #include <linux/ptrace.h>

+#include <linux/rcupdate.h> // for accessing current's parent
 #include <asm/uaccess.h>
 #include <asm/unistd.h>
 
@@ -115,6 +224,61 @@ SYSCALL_DEFINE2(gettimeofday, struct tim
 }
 
 /*
+ * Change current process's time dilation factor --- Jiaqi Yan
+ * What below is a total copy of init_virtual_start_time in fork.c
+ */
+SYSCALL_DEFINE2(settimedilationfactor, unsigned long, dilation, pid_t, ppid)
+{
+	if (dilation > 0) {
+		struct timeval now;
+		struct timespec ts;
+
+		if (ppid == 0) // change current's dilation
+		{
+			/* reset virtual_start so that we can get original time */
+			current->dilation = 0;
+
+			/* reset nsec fields, current version */
+			current->virtual_start_nsec = 0;
+			getnstimeofday(&ts);
+			current->virtual_start_nsec = timespec_to_ns(&ts);
+			current->physical_past_nsec = 0;
+			current->virtual_past_nsec = 0;
+
+			current->dilation = dilation;
+		} else { // change current's parent's dilation
+			/*
+			 * To access parent's data, we need to lock and unlock;
+			 * see https://www.kernel.org/doc/Documentation/RCU/whatisRCU.txt for more details
+			 */
+			rcu_read_lock();
+
+			struct task_struct* parent = rcu_dereference(current->real_parent);
+
+			/* pid_t == __kernel_pid_t == int */
+			if (!parent || parent->pid != ppid) {
+				rcu_read_unlock();
+				return -1;
+			}
+
+			parent->dilation = 0;
+
+			/* reset virtual_start so that we can get original time */
+			/* reset nsec fields, current version */
+			parent->virtual_start_nsec = 0;
+			getnstimeofday(&ts);
+			parent->virtual_start_nsec = timespec_to_ns(&ts);
+			parent->physical_past_nsec = 0;
+			parent->virtual_past_nsec = 0;
+
+			parent->dilation = dilation;
+			rcu_read_unlock();
+		}
+	}
+	return 0;
+}
+
+/*
  * Indicates if there is an offset between the system clock and the hardware
  * clock/persistent clock/rtc.
  */
